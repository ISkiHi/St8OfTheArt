BIN OBJ

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BinOBJ : MonoBehaviour
{
    public bool recycle;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BOOKSHELF SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class BookshelfScript : MonoBehaviour
{
    [SerializeField] Manager manager;

    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Bookshelf")
        {
            manager.AnxietyDecrease();
        }

        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CLOTHING STORAGE ZONE

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ClothingStorageZone : MonoBehaviour
{
    [SerializeField] Manager manager;

    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Clothes")
        {
            manager.AnxietyDecrease();
        }

        else
        {
            manager.AnxietyIncrease();
        }
        
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DARK LAUNDRY

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DarkLaundry : MonoBehaviour
{
    [SerializeField] Manager manager;
    
    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Laundry")
        {
            if (collider.gameObject.GetComponent<Laundry>().dark == true)
            {
                manager.AnxietyDecrease();
            }
            else
            {
                manager.AnxietyIncrease();
            }
        }
        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DONATE ZONE

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DonateZone : MonoBehaviour
{
    [SerializeField] Manager manager;

    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Box")
        {
            if (collider.gameObject.GetComponent<Interactable>().like == 2)
            {
                manager.AnxietyDecrease();
            }
            else if (collider.gameObject.GetComponent<Interactable>().like == 1)
            {
                manager.AnxietyIncrease();
            }
        }
        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FOOD SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class FoodScript : MonoBehaviour
{
    [SerializeField] Manager manager;

    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Bin")
        {
            if (collider.gameObject.GetComponent<BinOBJ>().recycle == false)
            {
                manager.AnxietyDecrease();
            }
            else
            {
                manager.AnxietyIncrease();
            }
        }

        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
INTERACTABLE

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Interactable : MonoBehaviour
{
    public Manager manager;
    
    public string item = "[Insert Name Here]";
    public string colour = "[Insert Colour Here";
    public int like = 0;

    private void Start()
    {
        StartCoroutine(ShortDelay());
    }

    private void LikeCheck()
    {
        for (int i = 0; i < manager.likes.Count; i++)
        {
            if (item == manager.likes[i])
            {
                like = 1;
                break;
            }
        }

        for (int i = 0; i < manager.dislikes.Count; i++)
        {
            if (item == manager.dislikes[i])
            {
                like = 2;
                break;
            }
        }
    }

    IEnumerator ShortDelay()
    {
        yield return new WaitForSeconds(0.1f);
        LikeCheck();
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
KEEP ZONE

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class KeepZone : MonoBehaviour
{
    [SerializeField] Manager manager;
    
    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Box")
        {
            if (collider.gameObject.GetComponent<Interactable>().like == 1)
            {
                manager.AnxietyDecrease();
            }
            else if (collider.gameObject.GetComponent<Interactable>().like == 2)
            {
                manager.AnxietyIncrease();
            }
        }
        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LAUNDRY

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Laundry : MonoBehaviour
{
    public bool dark;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LIGHT LAUNDRY

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LightLaundry : MonoBehaviour
{
    [SerializeField] Manager manager;
    
    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Laundry")
        {
            if (collider.gameObject.GetComponent<Laundry>().dark == false)
            {
                manager.AnxietyDecrease();
            }
            else
            {
                manager.AnxietyIncrease();
            }
        }

        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MANAGER

using System;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.XR.CoreUtils;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class Manager : MonoBehaviour
{
    [SerializeField] GameObject xrOrigin;
    [SerializeField] GameObject cameraUICanvas;
    [SerializeField] TMP_Text timer_text;
    [SerializeField] Image anxietyMeterMask;
    [SerializeField] Image anxietyMeterFill;
    [SerializeField] AudioSource[] music;
    [SerializeField] AudioSource[] sfx;

    [SerializeField] private List<string> traits;
    public List<string> likes;
    public List<string> dislikes;
    public List<TMP_Text> likeTexts;
    public List<TMP_Text> dislikeTexts;

    private int minutes = 6;
    private int seconds = 30;

    private AudioSource currentMusic;
    private int currentMusicInt;

    private float anxietyCurrent = 50f;
    private float anxietyMin = 0f;
    private float anxietyMax = 100f;
    private float anxietyWin = 15f;
    private float anxietyLose = 80f;

    public InputActionProperty aButton;
    private bool aButtonPressed;
    public InputActionProperty bButton;

    [SerializeField] private GameObject resultCanvas;
    [SerializeField] private TMP_Text resultText;

    // Start is called before the first frame update
    private void Start()
    {
        anxietyMeterMask.fillAmount = anxietyCurrent / anxietyMax;
        RandomTraits();
        AnxietyLevel();
        StartCoroutine(TimerTick());
    }

    private void Update()
    {
        if (aButton.action.ReadValue<float>() > 0.1f)
        {
            if (aButtonPressed == false)
            {
                if (cameraUICanvas.activeSelf == true)
                {
                    cameraUICanvas.SetActive(false);
                }
                else
                {
                    cameraUICanvas.SetActive(true);
                }
                aButtonPressed = true;
            }
        }
        else
        {
            if (aButtonPressed == true)
            {
                aButtonPressed = false;
            }
        }

        if (bButton.action.ReadValue<float>() > 0.5f)
        {
            SceneManager.LoadScene(0);
        }
    }

    private void RandomTraits()
    {
        int likeMax = 4;
        int dislikeMax = 4;
        int randomInt;

        for (int i = 0; i < likeMax; i++)
        {
            randomInt = UnityEngine.Random.Range(0, traits.Count);
            likes.Add(traits[randomInt]);
            traits.RemoveAt(randomInt);
            likeTexts[i].text = likes[i];
        }

        for (int i = 0; i < dislikeMax; i++)
        {
            randomInt = UnityEngine.Random.Range(0, traits.Count);
            dislikes.Add(traits[randomInt]);
            traits.RemoveAt(randomInt);
            dislikeTexts[i].text = dislikes[i];
        }


    }

    private void AnxietyLevel()
    {
        // 0 - 25
        if (anxietyCurrent <= anxietyMax / 4)
        {
            anxietyMeterFill.color = Color.green;
            MusicCheck(0);
        }
        // 26 - 50
        else if (anxietyCurrent > anxietyMax / 4 && anxietyCurrent <= anxietyMax / 4 * 2)
        {
            anxietyMeterFill.color = Color.green;
            MusicCheck(1);
        }
        // 51 - 75
        else if (anxietyCurrent > anxietyMax / 4 * 2 && anxietyCurrent <= anxietyMax / 4 * 3)
        {
            anxietyMeterFill.color = Color.yellow;
            MusicCheck(2);
        }
        // 76 - 100
        else
        {
            anxietyMeterFill.color = Color.red;
            MusicCheck(3);
        }
    }

    public void AnxietyDecrease()
    {
        sfx[0].Play();
        anxietyCurrent -= 10f;
        if (anxietyCurrent < anxietyMin)
        {
            anxietyCurrent = anxietyMin;
        }
        anxietyMeterMask.fillAmount = anxietyCurrent / anxietyMax;
        AnxietyLevel();
        ResultCheck();
    }

    public void AnxietyIncrease()
    {
        sfx[1].Play();
        anxietyCurrent += 10f;
        if(anxietyCurrent > anxietyMax)
        {
            anxietyCurrent = anxietyMax;
        }
        anxietyMeterMask.fillAmount = anxietyCurrent / anxietyMax;
        AnxietyLevel();
        ResultCheck();
    }

    private void MusicCheck(int musicValue)
    {
        if (currentMusicInt != musicValue)
        {
            if (currentMusic != null)
            {
                currentMusic.Stop();
            }
            currentMusicInt = musicValue;
            currentMusic = music[currentMusicInt];
            currentMusic.Play();
        }
    }

    private void ResultCheck()
    {
        if (anxietyCurrent < anxietyWin)
        {
            StopAllCoroutines();
            resultCanvas.SetActive(true);
            resultText.text = "You Win!";
        }
        else if (anxietyCurrent > anxietyLose)
        {
            StopAllCoroutines();
            resultCanvas.SetActive(true);
            resultText.text = "You Lose";
        }
    }

    IEnumerator TimerTick()
    {
        yield return new WaitForSeconds(1f);
        if (seconds == 0)
        {
            if (minutes == 0)
            {
                SceneManager.LoadScene(0);
            }
            else
            {
                minutes--;
                seconds = 59;
                timer_text.text = minutes.ToString() + ":" + seconds.ToString();
                StartCoroutine(TimerTick());
            }
        }
        else
        {
            seconds--;
            timer_text.text = minutes.ToString() + ":" + seconds.ToString("00");
            StartCoroutine(TimerTick());
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PENCIL HOLDER SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class PencilHolderScript : MonoBehaviour
{
    [SerializeField] Manager manager;
    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Pencil Holder")
        {
            manager.AnxietyDecrease();
            Destroy(collider.gameObject);
        }

        else
        {
            manager.AnxietyIncrease();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RECYCLING SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class RecyclingScript : MonoBehaviour
{
    [SerializeField] Manager manager;

    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Bin")
        {
            if (collider.gameObject.GetComponent<BinOBJ>().recycle == true)
            {
                manager.AnxietyDecrease();
            }
            else
            {
                manager.AnxietyIncrease();
            }
        }

        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SINK SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class SinkScript : MonoBehaviour
{
    [SerializeField] Manager manager;

    private void OnTriggerEnter(Collider collider)
    {
        if (collider.gameObject.tag == "Sink")
        {
            manager.AnxietyDecrease();
        }

        else
        {
            manager.AnxietyIncrease();
        }
        Destroy(collider.gameObject);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
VR FIX

using UnityEngine;
using UnityEngine.XR.Management;
using System.Collections;

public class VRFix : MonoBehaviour
{
    private void Start()
    {
        EnableXR();
    }

    private void OnDestroy()
    {
        DisableXR();
    }

    public void EnableXR()
    {
        StartCoroutine(StartXRCoroutine());
    }

    public void DisableXR()
    {
        XRGeneralSettings.Instance?.Manager?.StopSubsystems();
        XRGeneralSettings.Instance?.Manager?.DeinitializeLoader();
    }

    public IEnumerator StartXRCoroutine()
    {
        if (XRGeneralSettings.Instance == null)
        {
            XRGeneralSettings.Instance = XRGeneralSettings.CreateInstance<XRGeneralSettings>();
        }

        if (XRGeneralSettings.Instance.Manager == null)
        {
            yield return new WaitUntil(() => XRGeneralSettings.Instance.Manager != null);
        }

        XRGeneralSettings.Instance?.Manager?.InitializeLoaderSync();

        if (XRGeneralSettings.Instance?.Manager?.activeLoader == null)
        {
            Debug.LogError("Initializing XR Failed. Check Editor or Player log for details.");
        }
        else
        {
            XRGeneralSettings.Instance?.Manager?.StartSubsystems();
        }
    }
}