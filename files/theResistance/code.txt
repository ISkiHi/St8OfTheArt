BULLET CONTROLLER

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BulletController : MonoBehaviour
{
    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Wall")
        {
            Destroy(gameObject);
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
END SCRIPT

using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class EndScript : MonoBehaviour
{
    private int textX = 0;
    
    [SerializeField] private TMP_Text endText;
    [SerializeField] private string[] texts;

    // Start is called before the first frame update
    void Start()
    {
        StartCoroutine(NextText());
    }

    IEnumerator NextText()
    {
        endText.text = texts[textX];
        yield return new WaitForSeconds(4f);
        if (textX == texts.Length - 1)
        {
            SceneManager.LoadScene(0);
        }
        else
        {
            textX++;
            StartCoroutine(NextText());
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ENEMY SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class EnemyScript : MonoBehaviour
{
    private GameObject manager;
    private MedicScript medic;
    private WeaponController weaponScript;
    private EnemySpawn enemySpawn;

    private int spawnedInt;
    private float speed = 1.0f;
    private bool stop = false;
    private float health;
    private float fireDelayTime = 1f;

    [SerializeField] private float fireForce = 20f;
    [SerializeField] private Transform firePoint;
    [SerializeField] private GameObject bullets;
    [SerializeField] private Animator anim;

    private enum MovementState {running, idle}

    void Start()
    {
        manager = GameObject.FindWithTag("Manager");
        medic = manager.GetComponent<MedicScript>();
        weaponScript = manager.GetComponent<WeaponController>();
        enemySpawn = manager.GetComponent<EnemySpawn>();

        health = medic.enemyHealth;
        StartCoroutine(FireCheck());
    }

    void Update()
    {
        if (stop == false)
        {
            transform.Translate(Vector3.left * speed * Time.deltaTime);
        }
        else
        {
            transform.position = transform.position;
        }

        AnimationUpdate();
    }

    void AnimationUpdate()
    {
        MovementState state;

        if (stop == true)
        {
            state = MovementState.idle;
        }
        else
        {
            state = MovementState.running;
        }
        anim.SetInteger("state", (int)state);
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "MedicBullet")
        {
            Destroy(collision.gameObject);
            health -= medic.DMG; ;
            if (health <= 0)
            {
                Destroy(gameObject);
            }
        }

        if (collision.gameObject.tag == "SoldierBullet")
        {
            Destroy(collision.gameObject);
            health -= 0.5f;
            if (health <= 0) 
            {
                Destroy(gameObject);
            }
        }

        if (collision.gameObject.tag == "Stop")
        {
            stop = true;
        }

        if (collision.gameObject.tag == "End")
        {
            SceneManager.LoadScene(3);
        }
    }

    void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Stop")
        {
            stop = false;
        }
    }
    
    IEnumerator FireCheck()
    {
        yield return new WaitForSeconds(fireDelayTime);
        GameObject bullet = Instantiate(bullets, firePoint.position, firePoint.rotation);
        weaponScript.ShootSound();
        bullet.GetComponent<Rigidbody2D>().AddForce(-firePoint.right * fireForce, ForceMode2D.Impulse);
        StartCoroutine(FireCheck());
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ENEMY SPAWN

using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class EnemySpawn : MonoBehaviour
{
    private float delayTime = 2f;

    public int spawnInt;
    public int noSpawn = 0;

    [SerializeField] private GameObject enemies;
    [SerializeField] private GameObject[] spawnPoints;

    // Start is called before the first frame update
    void Start()
    {
        EnemySetup();
    }

    public void EnemySetup()
    {
        spawnInt = (Random.Range(0, spawnPoints.Length));
        
        if (noSpawn == 0)
        {
            StartCoroutine(SpawnEnemy());
        }
    }

    IEnumerator SpawnEnemy()
    {
        yield return new WaitForSeconds(delayTime);
        GameObject enemy = Instantiate(enemies, spawnPoints[spawnInt].transform.position, spawnPoints[spawnInt].transform.rotation);
        EnemySetup();
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MEDIC SCRIPT

using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class MedicScript : MonoBehaviour
{
    SoldierScript soldierScript;
    
    private float moveSpeed = 5f;
    private float dirX = 0;
    private float dirY = 0;
    
    public float DMG = 0.5f;
    public bool cooled = true;
    
    //Enemy Values
    public float enemyHealth = 1.5f;
    private float healthDelayTime = 10f;

    public int soldiersDead = 0;

    [SerializeField] private GameObject medic;
    [SerializeField] private Rigidbody2D rb;
    [SerializeField] private Animator anim;
    [SerializeField] private WeaponController weapon;
    [SerializeField] private GameObject hintText;

    //SFX
    [SerializeField] private AudioSource healSFX;
    [SerializeField] private AudioSource deathSFX;
    [SerializeField] private AudioSource mainMusic;

    private enum MovementState { idle, running }


    private void Start()
    {
        Cursor.visible = false;
        StartCoroutine(EnemyHealthIncrease());
        StartCoroutine(HintTextTransition());
    }
    
    // Update is called once per frame
    private void Update()
    {
        // movement checks
        dirX = Input.GetAxis("Horizontal");
        dirY = Input.GetAxis("Vertical");

        // movement updates
        if (rb.bodyType != RigidbodyType2D.Static)
        {
            rb.velocity = new Vector2(dirX * moveSpeed, rb.velocity.y);
            rb.velocity = new Vector2(rb.velocity.x, dirY * moveSpeed);
        }
        // fire
        if(Input.GetKeyDown("k"))
        {
            if (cooled == true)
            {
                weapon.Fire();
            }
        }

        if (soldiersDead < 3)
        {
            mainMusic.pitch = 1.0f;
        }
        else if (soldiersDead >= 3 && soldiersDead < 5)
        {
            mainMusic.pitch = 0.85f;
        }
        else
        {
            mainMusic.pitch = 0.6f;
        }

        AnimationUpdate();
    }

    private void AnimationUpdate()
    {
        MovementState state;
        
        if (dirX > 0 || dirX < 0 || dirY > 0 || dirY < 0)
        {
            state = MovementState.running;
        }
        else
        {
            state = MovementState.idle;
        }

        anim.SetInteger("state", (int)state);
    }

    public void HealSound()
    {
        healSFX.Play();
    }

    public void DeathSound()
    {
        deathSFX.Play();
        mainMusic.Stop();
    }

    public void MusicStart()
    {
        mainMusic.Play();
    }

    IEnumerator EnemyHealthIncrease()
    {

        yield return new WaitForSeconds(healthDelayTime);
        enemyHealth += 0.1f;
        StartCoroutine(EnemyHealthIncrease());
    }

    IEnumerator HintTextTransition()
    {
        yield return new WaitForSeconds(3f);
        hintText.SetActive(false);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MENU SCRIPT

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.SceneManagement;

public class MenuScript : MonoBehaviour
{
    [SerializeField] private GameObject controlsScreen;
    [SerializeField] private AudioSource click;

    [SerializeField] private GameObject startButton;
    [SerializeField] private GameObject controlsButton;
    [SerializeField] private GameObject backButton;

    float currentButton = 0;

    private void Awake()
    {
        ButtonSwitch(currentButton);
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    private void Start()
    {
        controlsScreen.SetActive(false);
    }

    private void Update()
    {
        // down menu nav
        if (Input.GetKeyDown(KeyCode.DownArrow) || Input.GetKeyDown(KeyCode.S))
        {
            if (currentButton == 1)
            {
                currentButton = 0;
            }
            else
            {
                currentButton++;
            }
            ButtonSwitch(currentButton);
        }

        // up menu nav
        if (Input.GetKeyDown(KeyCode.UpArrow) || Input.GetKeyDown(KeyCode.W))
        {
            if (currentButton == 0)
            {
                currentButton = 1;
            }
            else
            {
                currentButton--;
            }
            ButtonSwitch(currentButton);
        }
    }

    public void StartGame()
    {
        click.Play();
        SceneManager.LoadScene(1);
    }

    public void Controls()
    {
        if (controlsScreen.activeSelf)
        {
            controlsScreen.SetActive(false);
            currentButton = 0;
            ButtonSwitch(currentButton);

        }
        else
        {
            controlsScreen.SetActive(true);
            currentButton = 2;
            EventSystem.current.SetSelectedGameObject(backButton);
        }
        click.Play();
    }

    private void ButtonSwitch(float currentButton)
    {
        switch(currentButton)
        {
            case 0:
                EventSystem.current.SetSelectedGameObject(startButton);
                break;
            case 1:
                EventSystem.current.SetSelectedGameObject(controlsButton);
                break;
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PRE GAME SCRIPT

using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class PreGameScript : MonoBehaviour
{
    private int textX = 0;

    [SerializeField] private TMP_Text introText;

    [TextAreaAttribute]
    [SerializeField] private string[] texts;

    // Start is called before the first frame update
    void Start()
    { 
        StartCoroutine(NextText());
    }

    IEnumerator NextText()
    {
        introText.text = texts[textX];
        yield return new WaitForSeconds(4f);
        if (textX == texts.Length - 1)
        {
            SceneManager.LoadScene(2);
        }
        else
        {
            textX++;
            StartCoroutine(NextText());
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SOLDIER SCRIPT

using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class SoldierScript : MonoBehaviour
{
    private GameObject manager;
    private GameObject enemies;
    MedicScript medicScript;
    WeaponController weaponScript;
    EnemySpawn enemySpawn;
    private SpriteRenderer spriteRenderer;
    
    private float fireForce = 20f;
    private float cooldownDelay = 1f;
    private float deathMessageDelay = 3f;
    private float health;
    private float maxHealth = 5f;
    private bool interactZone = false;
    private bool healCooldown = true;

    [SerializeField] private Animator anim;

    [SerializeField] private GameObject bullets;
    [SerializeField] private Transform firePoint;
    [SerializeField] private GameObject healthBar;

    //Text
    [SerializeField] private GameObject textBox;
    [SerializeField] private TMP_Text dialogue;
    [TextAreaAttribute]
    [SerializeField] private string[] startCommon;
    [TextAreaAttribute]
    [SerializeField] private string[] startDeath;
    [TextAreaAttribute]
    [SerializeField] private string[] intenseCommon;
    [TextAreaAttribute]
    [SerializeField] private string[] intenseDeath;
    [TextAreaAttribute]
    [SerializeField] private string[] losingCommon;
    [TextAreaAttribute]
    [SerializeField] private string[] losingDeath;
    [TextAreaAttribute]
    [SerializeField] private string[] startAssistText;
    [TextAreaAttribute]
    [SerializeField] private string[] intenseAssistText;

    //Camera
    [SerializeField] private Camera mainCam;
    [SerializeField] private Camera soldierCam;

    private enum MovementState { running, death }

    // Start is called before the first frame update
    void Start()
    {
        manager = GameObject.FindWithTag("Manager");
        medicScript = manager.GetComponent<MedicScript>();
        weaponScript = manager.GetComponent<WeaponController>();
        enemySpawn = manager.GetComponent<EnemySpawn>();
        spriteRenderer = GetComponent<SpriteRenderer>();

        soldierCam.enabled = false;
        textBox.SetActive(false);
        health = maxHealth;
        StartCoroutine(Cooldown());
        StartCoroutine(RandomDialogue());
    }

    void Update()
    {
        enemies = GameObject.FindWithTag("Enemy");

        if (Input.GetKeyDown("l"))
        {
            if (interactZone == true)
            {
                Heal();
            }
        }

        AnimationUpdate();
    }

    public void Fire()
    {
        if(enemies != null)
        {
            GameObject bullet = Instantiate(bullets, firePoint.position, firePoint.rotation);
            bullet.GetComponent<Rigidbody2D>().AddForce(firePoint.right * fireForce, ForceMode2D.Impulse);
            weaponScript.ShootSound();
        }
        StartCoroutine(Cooldown());
    }

    public void Heal()
    {
        if (enemySpawn.noSpawn > 0)
        {
            if (health <= 0)
            {
                GameObject[] currentEnemies = GameObject.FindGameObjectsWithTag("Enemy");

                foreach (GameObject enemy in currentEnemies)
                {
                    Destroy(enemy);
                }

                StartCoroutine(DeathMessage());
            }
        }
        else
        {
            if (healCooldown == true)
            {
                medicScript.HealSound();
                health += 2.5f;
                if (health >= maxHealth)
                {
                    health = maxHealth;
                }
                healthBar.transform.localScale = new Vector3(health / maxHealth / 2.5f, healthBar.transform.localScale.y, healthBar.transform.localScale.z);
                StartCoroutine(CooldownHealing());
            }
        }

    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if(collision.gameObject.tag == "EnemyBullet")
        {
            Destroy(collision.gameObject);
            health -= 0.5f;
            
            if (healthBar != null)
            {
                healthBar.transform.localScale = new Vector3(health / maxHealth / 2.5f, healthBar.transform.localScale.y, healthBar.transform.localScale.z);
            }

            if (health == 0f)
            {
                int randX;
                Destroy(healthBar);
                medicScript.DeathSound();
                textBox.SetActive(true);
                if (medicScript.soldiersDead < 5)
                {
                    randX = Random.Range(0, startAssistText.Length);
                    dialogue.text = startAssistText[randX];
                }
                else
                {
                    randX = Random.Range(0, intenseAssistText.Length);
                    dialogue.text = intenseAssistText[randX];
                }
                medicScript.DMG += 0.5f; ;
                enemySpawn.noSpawn++;
                Debug.Log("noSpawn = " + enemySpawn.noSpawn);
            }

            if (health <= 0f)
            {
                spriteRenderer.color = new Color(255, 255, 255, 50);
            }
        }

        if (collision.gameObject.tag == "Interact")
        {
            interactZone = true;
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Interact")
        {
            interactZone = false;
        }
    }

    private void AnimationUpdate()
    {
        MovementState state;

        if (health > 0)
        {
            state = MovementState.running;
        }
        else
        {
            state = MovementState.death;
        }

        anim.SetInteger("state", (int)state);
    }

    IEnumerator Cooldown()
    {
        yield return new WaitForSeconds(cooldownDelay);
        
        if (enemies != null)
        {
            Fire();
        }
        else
        {
            StartCoroutine(Cooldown());
        }
    }

    IEnumerator RandomDialogue()
    {
        int delayX = Random.Range(3, 10);
        
        if (enemySpawn.noSpawn == 0)
        {
            if (health > 4f)
            {
                int randX;
                yield return new WaitForSeconds(delayX);
                textBox.SetActive(true);
                
                if (medicScript.soldiersDead < 3)
                {
                    randX = Random.Range(0, startCommon.Length);
                    dialogue.text = startCommon[randX];
                }
                else if (medicScript.soldiersDead >= 3 && medicScript.soldiersDead < 5)
                {
                    randX = Random.Range(0, intenseCommon.Length);
                    dialogue.text = intenseCommon[randX];
                }
                else
                {
                    randX = Random.Range(0, losingCommon.Length);
                    dialogue.text = losingCommon[randX];
                }

                yield return new WaitForSeconds(delayX);
                
                if (health > 0)
                {
                    textBox.SetActive(false);
                }
            }
        }

        yield return new WaitForSeconds(delayX);
        StartCoroutine(RandomDialogue());
    }
    
    IEnumerator DeathMessage()
    {
        int randX;
        soldierCam.enabled = true;
        mainCam.enabled = false; 
        
        if (medicScript.soldiersDead < 3)
        {
            randX = Random.Range(0, startDeath.Length);
            dialogue.text = startDeath[randX];
        }
        else if (medicScript.soldiersDead >= 3 && medicScript.soldiersDead < 5)
        {
            randX = Random.Range(0, intenseDeath.Length);
            dialogue.text = intenseDeath[randX];
        }
        else
        {
            randX = Random.Range(0, losingDeath.Length);
            dialogue.text = losingDeath[randX];
        }
        yield return new WaitForSeconds(deathMessageDelay);
        enemySpawn.noSpawn--;
        if (enemySpawn.noSpawn == 0)
        {
            medicScript.MusicStart();
            enemySpawn.EnemySetup();
        }
        medicScript.soldiersDead++;
        textBox.SetActive(false);
        mainCam.enabled = true;
        soldierCam.enabled = false;
        Destroy(gameObject);
    }

    IEnumerator CooldownHealing()
    {
        healCooldown = false;
        yield return new WaitForSeconds(1.5f);
        healCooldown = true;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEAPON CONTROLLER

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WeaponController : MonoBehaviour
{
    [SerializeField] private MedicScript medic;
    
    [SerializeField] private GameObject bullets;

    [SerializeField] private Transform firePoint;
    [SerializeField] private float fireForce = 20f;
    [SerializeField] private AudioSource shootSFX;

    private float delayTime = 0.5f;

    public void Fire()
    {
        GameObject bullet = Instantiate(bullets, firePoint.position, firePoint.rotation);
        bullet.GetComponent<Rigidbody2D>().AddForce(firePoint.right * fireForce, ForceMode2D.Impulse);
        shootSFX.Play();
        StartCoroutine(Cooldown());
    }

    public void ShootSound()
    {
        shootSFX.Play();
    }

    IEnumerator Cooldown()
    {
        medic.cooled = false;
        yield return new WaitForSeconds(delayTime);
        medic.cooled = true;
    }
}